// Generated by CoffeeScript 1.7.1
(function() {
  var LazyLet, asFn, bind, getter;

  bind = function(fn, self) {
    return function() {
      return fn.apply(self, arguments);
    };
  };

  asFn = function(valueOrFn) {
    if (typeof valueOrFn === 'function') {
      return valueOrFn;
    } else {
      return function() {
        return valueOrFn;
      };
    }
  };

  getter = function(obj, name, fn) {
    return Object.defineProperty(obj, name, {
      get: fn,
      configurable: true,
      enumerable: true
    });
  };

  LazyLet = {
    Env: function() {
      var Let, defineInBulk, defineOneVariable, env, funs, memoize, memos, redefine, resetEnv;
      env = {};
      funs = {};
      memos = {};
      resetEnv = function() {
        var name, _i, _len, _ref, _results;
        funs = {};
        memos = {};
        _ref = Object.keys(env);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          if (name !== 'Let') {
            _results.push(delete env[name]);
          }
        }
        return _results;
      };
      memoize = function(name, fn) {
        return function() {
          var memo;
          memo = memos[name];
          if (memo != null) {
            return memo;
          } else {
            return memos[name] = fn();
          }
        };
      };
      redefine = function(name, fn) {
        var newEnv, newFn, oldFn;
        newEnv = Object.create(env);
        oldFn = funs[name];
        getter(newEnv, name, bind(oldFn, env));
        newFn = bind(fn, newEnv);
        getter(env, name, newFn);
        return newFn;
      };
      defineOneVariable = function(name, valueOrFn) {
        var fn;
        if (name === 'Let') {
          throw 'cannot redefine Let';
        }
        memos = {};
        fn = asFn(valueOrFn);
        if (funs[name] != null) {
          fn = redefine(name, fn);
        } else {
          getter(env, name, memoize(name, bind(fn, env)));
        }
        return funs[name] = fn;
      };
      defineInBulk = function(object) {
        var name, thing, _results;
        _results = [];
        for (name in object) {
          thing = object[name];
          _results.push(defineOneVariable(name, thing));
        }
        return _results;
      };
      Let = function() {
        var args, name, thing;
        args = [].slice.apply(arguments);
        if (typeof args[0] === 'object') {
          return defineInBulk(args[0]);
        } else {
          name = args[0], thing = args[1];
          return defineOneVariable(name, thing);
        }
      };
      Object.defineProperty(env, 'Let', {
        writable: false,
        configurable: false,
        value: Let
      });
      Object.defineProperties(Let, {
        clear: {
          writable: false,
          configurable: false,
          value: resetEnv
        }
      });
      return env;
    }
  };

  if ((typeof module !== 'undefined') && (module.exports != null)) {
    module.exports = LazyLet;
  } else {
    this.LazyLet = LazyLet;
  }

}).call(this);
