// Generated by CoffeeScript 1.7.1
(function() {
  var Let, defineInBulk, defineOneVariable, env, resetEnv, top, vars;

  env = {};

  top = {};

  vars = {};

  resetEnv = function() {
    var name, _i, _len, _ref, _results;
    vars = {};
    top = {};
    _ref = Object.keys(env);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (name !== 'Let') {
        _results.push(delete env[name]);
      }
    }
    return _results;
  };

  defineOneVariable = function(name, valueOrFn) {
    var current, fn;
    if (name === 'Let') {
      throw 'cannot redefine Let';
    }
    fn = void 0;
    if (typeof valueOrFn === 'function') {
      fn = valueOrFn.bind(top);
    } else {
      fn = function() {
        return valueOrFn;
      };
    }
    current = vars[name] || (function() {});
    vars[name] = function() {
      return fn(current());
    };
    top = Object.create(top);
    Object.defineProperty(top, name, {
      get: vars[name],
      configurable: true,
      enumerable: true
    });
    return Object.defineProperty(env, name, {
      get: function() {
        return top[name];
      },
      configurable: true,
      enumerable: true
    });
  };

  defineInBulk = function(object, preserve) {
    var name, thing, _results;
    if (preserve == null) {
      preserve = false;
    }
    if (!preserve) {
      resetEnv();
    }
    _results = [];
    for (name in object) {
      thing = object[name];
      _results.push(defineOneVariable(name, thing));
    }
    return _results;
  };

  Let = function() {
    var args, name, thing;
    args = [].slice.apply(arguments);
    if (typeof args[0] === 'object') {
      return defineInBulk(args[0]);
    } else {
      name = args[0], thing = args[1];
      return defineOneVariable(name, thing);
    }
  };

  Object.defineProperty(env, 'Let', {
    writable: false,
    configurable: false,
    value: Let
  });

  Object.defineProperties(Let, {
    preserve: {
      writable: false,
      configurable: false,
      value: function(object) {
        return defineInBulk(object, true);
      }
    },
    clear: {
      writable: false,
      configurable: false,
      value: resetEnv
    }
  });

  (typeof module !== "undefined" && module !== null ? module.exports = env : void 0) || (this.lazylet = {
    env: env
  });

}).call(this);
